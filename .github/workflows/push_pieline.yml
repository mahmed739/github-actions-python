---
name: CI
on:
  push:
    branches:
      - main
jobs:
  scan:
    runs-on: ubuntu-latest
    allow-failure: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Check Base image
        run: |
          DOCKERFILE=$(find . -iname 'dockerfile')
          if [ -f "${DOCKERFILE}" ]; then
            echo Dockerfile found at $(pwd)/"${DOCKERFILE}"
            DOCKERFILE_BASE_IMAGE=$(grep -Ei '^FROM\s+' $DOCKERFILE | awk '{print $2}');
            if grep -q $DOCKERFILE_BASE_IMAGE allowedImages.txt; then
              echo "Your Dockerfile Base Images are allowed. Continuing pipeline.";
            else
              echo "ERROR: Your Dockerfile Base images are not allowed. Aborting pipeline.";
              echo -e '\n'"Please Review your Dockerfile and replace base images from the Approved Images Registries.";
              exit 1;
            fi
          else
            echo "Dockerfile not found."
          fi
      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Test with Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile
      - name: pylint
        run: |
          pip3 install pylint
          if [ -e requirements.txt ]; then
            pip3 install --user --requirement requirements.txt
          else
            echo "No 'requirements.txt' file detected, skipping pip install on requirements.txt"
            echo "If you have dependencies outside of libs shipped with python, you'll need a requirements.txt to get them pip installed here"
            echo "Please provide your requirements.txt at the top level of your project to have it detected"
          fi
          pylint -d C0301 -d W0703 **/*.py

  build-publish:
    runs-on: ubuntu-latest
    needs: scan
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      #- name: Configure AWS Credentials
      #- name: Login to Amazon ECR
      - name: Build and push to ECR
        run: |
          docker build -t app:blue .
          # docker push

  security:
    runs-on: ubuntu-latest
    needs: build-publish
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      #- name:pull blue image
        # run: |
        #   docker pull app:blue
      # local build for demo
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build
        uses: docker/build-push-action@v4
        with:
          context: .
          outputs: type=docker,dest=/tmp/image.tar
          tags: user/app:latest
      - name: Scan for vulnerabilities
        uses: crazy-max/ghaction-container-scan@v3
        with:
          tarball: /tmp/image.tar

  test:
    runs-on: ubuntu-latest
    needs: security
    steps:
      - uses: actions/checkout@v3 
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env: 
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #- name: QA test

  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v3
  #     - name: Configure AWS Credentials
  #     - name: Login to Amazon ECR
  #     - name: promote the blue image to green
  #       run: |
  #         docker pull app:blue app:latest
  #         docker tag app:latest app:old
  #         docker tag app:blue app:latest
  #         docker push app:latest app:old

  post-deploy-test:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Test production env
        run: echo "confirmed"

  rollback:
    if:  failure()
    runs-on: ubuntu-latest
    needs: post-deploy-test
    steps:
  #     - name: Configure AWS Credentials
  #     - name: Login to Amazon ECR
  #     - name: AWS ecr-cli command to revert the blue image 
  #     - name: use the old inage tag
  #       run: |
  #         docker pull app:old
  #         docker tag app:old app:latest
  #         docker push app:latest
      - name: rollback
        run: echo "done"

  clean-up:
    runs-on: ubuntu-latest
    needs: post-deploy-test
    steps:
  #     - name: Configure AWS Credentials
  #     - name: Login to Amazon ECR
  #     - name: AWS ecr-cli command to delete the blue image 
      - name: Remove the blue and old tags
        run: echo "done"